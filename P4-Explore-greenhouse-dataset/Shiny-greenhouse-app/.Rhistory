wb_ghg <- WDI(country = "all",
indicator = "EN.ATM.GHGT.KT.CE",
start = 1970,
end = 2012,
extra = TRUE) %>%
filter(!is.na(region)) %>%
filter(!(region == "Aggregates"))
wb_ghg <- WDI(country = "all",
indicator = "EN.ATM.GHGT.KT.CE",
start = 1970,
end = 2012,
extra = TRUE) %>%
filter(!is.na(region)) %>%
filter(!(region == "Aggregates")) %>%
select(EN.ATM.GHGT.KT.CE, iso3c, year, country)
save(wb_ghg, file = "data/wb_ghg.RData")
library(tidyverse)
#Download the greenhouse gas emissions data for year 2012 by using the World Bank's API, parse the resulting JSON file, and format it in the long country-year format.
wb_ghg2 <- WDI(country = "all",
indicator = "EN.ATM.GHGT.KT.CE",
start = 1970,
end = 2012,
extra = TRUE) %>%
filter(!is.na(region)) %>%
filter(!(region == "Aggregates")) %>%
select(EN.ATM.GHGT.KT.CE, iso3c, year, country)
# Saving on object in RData format for loading the data in Shiny app
save(wb_ghg2, file = "data/wb_ghg.RData")
library(tidyverse)
#Download the greenhouse gas emissions data for year 2012 by using the World Bank's API, parse the resulting JSON file, and format it in the long country-year format.
wb_ghg2 <- WDI(country = "all",
indicator = "EN.ATM.GHGT.KT.CE",
start = 1970,
end = 2012,
extra = TRUE) %>%
filter(!is.na(region)) %>%
filter(!(region == "Aggregates")) %>%
select(EN.ATM.GHGT.KT.CE, iso3c, year, country)
# Saving on object in RData format for loading the data in Shiny app
save(wb_ghg2, file = "data/wb_ghg.RData")
library(tidyverse)
#Download the greenhouse gas emissions data for year 2012 by using the World Bank's API, parse the resulting JSON file, and format it in the long country-year format.
wb_ghg2 <- WDI(country = "all",
indicator = "EN.ATM.GHGT.KT.CE",
start = 1970,
end = 2012,
extra = TRUE) %>%
filter(!is.na(region)) %>%
filter(!(region == "Aggregates")) %>%
select(EN.ATM.GHGT.KT.CE, iso3c, year, country)
# Saving on object in RData format for loading the data in Shiny app
save(wb_ghg2, file = "data/wb_ghg2.RData")
library(tidyverse)
#Download the greenhouse gas emissions data for year 2012 by using the World Bank's API, parse the resulting JSON file, and format it in the long country-year format.
wb_ghg2 <- WDI(country = "all",
indicator = "EN.ATM.GHGT.KT.CE",
start = 1970,
end = 2012,
extra = TRUE) %>%
filter(!is.na(region)) %>%
filter(!(region == "Aggregates")) %>%
select(EN.ATM.GHGT.KT.CE, iso3c, year, country)
# Saving on object in RData format for loading the data in Shiny app
save(wb_ghg2, file = "data/wb_ghg2.RData")
library(tidyverse)
#Download the greenhouse gas emissions data for year 2012 by using the World Bank's API, parse the resulting JSON file, and format it in the long country-year format.
wb_ghg2 <- WDI(country = "all",
indicator = "EN.ATM.GHGT.KT.CE",
start = 1970,
end = 2012,
extra = TRUE) %>%
filter(!is.na(region)) %>%
filter(!(region == "Aggregates")) %>%
select(EN.ATM.GHGT.KT.CE, iso3c, year, country)
# Saving on object in RData format for loading the data in Shiny app
save(wb_ghg2, file = "wb_ghg2.RData")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(plotly)
library(forcats)
library(ggvis)
library(leaflet)
library(WDI)
library(sp)
countries <- geojsonio::geojson_read("data/countries.geojson", what = "sp")
#url <- "https://raw.githubusercontent.com/datasets/geo-countries/master/data/countries.geojson"
#countries <- geojsonio::geojson_read(url, method = "local", what = "sp")
class(countries)
countries <- geojsonio::geojson_read("data/countries.geojson", what = "sp")
#url <- "https://raw.githubusercontent.com/datasets/geo-countries/master/data/countries.geojson"
#countries <- geojsonio::geojson_read(url, method = "local", what = "sp")
class(countries)
names(countries)
wb_ghg <- WDI(country = "all",
indicator = "EN.ATM.GHGT.KT.CE",
start = 2012,
end = 2012,
extra = TRUE)
countries_plus_ghg <- sp::merge(countries, wb_ghg,
by.x = "ISO_A3", by.y = "iso3c")
names(countries_plus_ghg)
# Define numeric vector bins to add some color
bins = ggplot2:::breaks(c(min(countries_plus_ghg$EN.ATM.GHGT.KT.CE, na.rm = TRUE)
,max(countries_plus_ghg$EN.ATM.GHGT.KT.CE, na.rm = TRUE)),"width",n = 5)
# Call colorBin to generate a palette function that maps the RColorBrewer
#"YlOrRd" colors to our bins.
pal <- colorBin("YlGnBu", domain = countries_plus_ghg$EN.ATM.GHGT.KT.CE, bins = bins)
# Generate the labels with some HTML
labels <- sprintf(
"<strong>%s</strong><br/>%g",
countries_plus_ghg$country, countries_plus_ghg$EN.ATM.GHGT.KT.CE
) %>% lapply(htmltools::HTML)
# Generate interactive map
m = leaflet(countries) %>%
setView(0, 20, zoom = 1.5) %>%
addTiles()
p10 <- m %>% addPolygons(
fillColor = ~pal(countries_plus_ghg[["EN.ATM.GHGT.KT.CE"]]),
weight = 1,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = countries_plus_ghg[["EN.ATM.GHGT.KT.CE"]], opacity = 0.7, title = "Emissions (kt of CO2 equivalent)",
position = "bottomleft")
p10
install.packages("rgeos")
install.packages("rgeos")
library(tidyverse)
library(plotly)
library(forcats)
library(ggvis)
library(leaflet)
library(WDI)
library(sp)
library(rgeos)
countries_simple <- gSimplify(countries, tol=0.01, topologyPreserve=TRUE)
names(countries_simple)
names(countries)
?gSimplify
countries_plus_ghg <- sp::merge(countries_simple, wb_ghg,
by.x = "ISO_A3", by.y = "iso3c")
?geojsonio::geojson_read
?rmapshaper::ms_simplify
install.packages(rmapshaper)
install.packages("rmapshaper")
countries_simple <- rmapshaper::ms_simplify(countries, tol=0.01, topologyPreserve=TRUE)
?rmapshaper::ms_simplify
countries_simple <- rmapshaper::ms_simplify(countries, keep = 0.01)
names(countries_simple)
wb_ghg <- WDI(country = "all",
indicator = "EN.ATM.GHGT.KT.CE",
start = 2012,
end = 2012,
extra = TRUE)
countries_plus_ghg <- sp::merge(countries_simple, wb_ghg,
by.x = "ISO_A3", by.y = "iso3c")
names(countries_plus_ghg)
# Define numeric vector bins to add some color
bins = ggplot2:::breaks(c(min(countries_plus_ghg$EN.ATM.GHGT.KT.CE, na.rm = TRUE)
,max(countries_plus_ghg$EN.ATM.GHGT.KT.CE, na.rm = TRUE)),"width",n = 5)
# Call colorBin to generate a palette function that maps the RColorBrewer
#"YlOrRd" colors to our bins.
pal <- colorBin("YlGnBu", domain = countries_plus_ghg$EN.ATM.GHGT.KT.CE, bins = bins)
# Generate the labels with some HTML
labels <- sprintf(
"<strong>%s</strong><br/>%g",
countries_plus_ghg$country, countries_plus_ghg$EN.ATM.GHGT.KT.CE
) %>% lapply(htmltools::HTML)
# Generate interactive map
m = leaflet(countries) %>%
setView(0, 20, zoom = 1.5) %>%
addTiles()
p10 <- m %>% addPolygons(
fillColor = ~pal(countries_plus_ghg[["EN.ATM.GHGT.KT.CE"]]),
weight = 1,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = countries_plus_ghg[["EN.ATM.GHGT.KT.CE"]], opacity = 0.7, title = "Emissions (kt of CO2 equivalent)",
position = "bottomleft")
p10
# Define numeric vector bins to add some color
bins = ggplot2:::breaks(c(min(countries_plus_ghg$EN.ATM.GHGT.KT.CE, na.rm = TRUE)
,max(countries_plus_ghg$EN.ATM.GHGT.KT.CE, na.rm = TRUE)),"width",n = 5)
# Call colorBin to generate a palette function that maps the RColorBrewer
#"YlOrRd" colors to our bins.
pal <- colorBin("YlGnBu", domain = countries_plus_ghg$EN.ATM.GHGT.KT.CE, bins = bins)
# Generate the labels with some HTML
labels <- sprintf(
"<strong>%s</strong><br/>%g",
countries_plus_ghg$country, countries_plus_ghg$EN.ATM.GHGT.KT.CE
) %>% lapply(htmltools::HTML)
# Generate interactive map
m = leaflet(countries_simple) %>%
setView(0, 20, zoom = 1.5) %>%
addTiles()
p10 <- m %>% addPolygons(
fillColor = ~pal(countries_plus_ghg[["EN.ATM.GHGT.KT.CE"]]),
weight = 1,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = countries_plus_ghg[["EN.ATM.GHGT.KT.CE"]], opacity = 0.7, title = "Emissions (kt of CO2 equivalent)",
position = "bottomleft")
p10
countries_simple <- rmapshaper::ms_simplify(countries, keep = 0.01, keep_shapes = TRUE)
countries_simple <- rmapshaper::ms_simplify(countries, keep = 0.05, keep_shapes = TRUE)
names(countries_simple)
wb_ghg <- WDI(country = "all",
indicator = "EN.ATM.GHGT.KT.CE",
start = 2012,
end = 2012,
extra = TRUE)
countries_plus_ghg <- sp::merge(countries_simple, wb_ghg,
by.x = "ISO_A3", by.y = "iso3c")
names(countries_plus_ghg)
# Define numeric vector bins to add some color
bins = ggplot2:::breaks(c(min(countries_plus_ghg$EN.ATM.GHGT.KT.CE, na.rm = TRUE)
,max(countries_plus_ghg$EN.ATM.GHGT.KT.CE, na.rm = TRUE)),"width",n = 5)
# Call colorBin to generate a palette function that maps the RColorBrewer
#"YlOrRd" colors to our bins.
pal <- colorBin("YlGnBu", domain = countries_plus_ghg$EN.ATM.GHGT.KT.CE, bins = bins)
# Generate the labels with some HTML
labels <- sprintf(
"<strong>%s</strong><br/>%g",
countries_plus_ghg$country, countries_plus_ghg$EN.ATM.GHGT.KT.CE
) %>% lapply(htmltools::HTML)
# Generate interactive map
m = leaflet(countries_simple) %>%
setView(0, 20, zoom = 1.5) %>%
addTiles()
p10 <- m %>% addPolygons(
fillColor = ~pal(countries_plus_ghg[["EN.ATM.GHGT.KT.CE"]]),
weight = 1,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = countries_plus_ghg[["EN.ATM.GHGT.KT.CE"]], opacity = 0.7, title = "Emissions (kt of CO2 equivalent)",
position = "bottomleft")
p10
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(plotly)
library(forcats)
library(ggvis)
library(leaflet)
library(WDI)
library(sp)
library(rgeos)
countries <- geojsonio::geojson_read("data/countries.geojson", what = "sp")
#url <- "https://raw.githubusercontent.com/datasets/geo-countries/master/data/countries.geojson"
#countries <- geojsonio::geojson_read(url, method = "local", what = "sp")
class(countries)
countries_simple <- rmapshaper::ms_simplify(countries, keep = 0.5, keep_shapes = TRUE)
names(countries_simple)
wb_ghg <- WDI(country = "all",
indicator = "EN.ATM.GHGT.KT.CE",
start = 2012,
end = 2012,
extra = TRUE)
countries_plus_ghg <- sp::merge(countries_simple, wb_ghg,
by.x = "ISO_A3", by.y = "iso3c")
names(countries_plus_ghg)
# Define numeric vector bins to add some color
bins = ggplot2:::breaks(c(min(countries_plus_ghg$EN.ATM.GHGT.KT.CE, na.rm = TRUE)
,max(countries_plus_ghg$EN.ATM.GHGT.KT.CE, na.rm = TRUE)),"width",n = 5)
# Call colorBin to generate a palette function that maps the RColorBrewer
#"YlOrRd" colors to our bins.
pal <- colorBin("YlGnBu", domain = countries_plus_ghg$EN.ATM.GHGT.KT.CE, bins = bins)
# Generate the labels with some HTML
labels <- sprintf(
"<strong>%s</strong><br/>%g",
countries_plus_ghg$country, countries_plus_ghg$EN.ATM.GHGT.KT.CE
) %>% lapply(htmltools::HTML)
# Generate interactive map
m = leaflet(countries_simple) %>%
setView(0, 20, zoom = 1.5) %>%
addTiles()
p10 <- m %>% addPolygons(
fillColor = ~pal(countries_plus_ghg[["EN.ATM.GHGT.KT.CE"]]),
weight = 1,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = countries_plus_ghg[["EN.ATM.GHGT.KT.CE"]], opacity = 0.7, title = "Emissions (kt of CO2 equivalent)",
position = "bottomleft")
p10
shiny::runApp('greenhouse-gas')
countries_simple <- rmapshaper::ms_simplify(countries, keep = 0.5, keep_shapes = TRUE)
save(countries_simple, file = "data/countries_simple.RData")
load("data/countries_simple.RData")
names(countries_simple)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(plotly)
library(forcats)
library(ggvis)
library(leaflet)
library(WDI)
library(sp)
load("data/countries_simple.RData")
names(countries_simple)
wb_ghg <- WDI(country = "all",
indicator = "EN.ATM.GHGT.KT.CE",
start = 2012,
end = 2012,
extra = TRUE)
countries_plus_ghg <- sp::merge(countries_simple, wb_ghg,
by.x = "ISO_A3", by.y = "iso3c")
names(countries_plus_ghg)
# Define numeric vector bins to add some color
bins = ggplot2:::breaks(c(min(countries_plus_ghg$EN.ATM.GHGT.KT.CE, na.rm = TRUE)
,max(countries_plus_ghg$EN.ATM.GHGT.KT.CE, na.rm = TRUE)),"width",n = 5)
# Call colorBin to generate a palette function that maps the RColorBrewer
#"YlOrRd" colors to our bins.
pal <- colorBin("YlGnBu", domain = countries_plus_ghg$EN.ATM.GHGT.KT.CE, bins = bins)
# Generate the labels with some HTML
labels <- sprintf(
"<strong>%s</strong><br/>%g",
countries_plus_ghg$country, countries_plus_ghg$EN.ATM.GHGT.KT.CE
) %>% lapply(htmltools::HTML)
# Generate interactive map
m = leaflet(countries_simple) %>%
setView(0, 20, zoom = 1.5) %>%
addTiles()
# Define numeric vector bins to add some color
bins = ggplot2:::breaks(c(min(countries_plus_ghg$EN.ATM.GHGT.KT.CE, na.rm = TRUE)
,max(countries_plus_ghg$EN.ATM.GHGT.KT.CE, na.rm = TRUE)),"width",n = 5)
# Call colorBin to generate a palette function that maps the RColorBrewer
#"YlOrRd" colors to our bins.
pal <- colorBin("YlGnBu", domain = countries_plus_ghg$EN.ATM.GHGT.KT.CE, bins = bins)
# Generate the labels with some HTML
labels <- sprintf(
"<strong>%s</strong><br/>%g",
countries_plus_ghg$country, countries_plus_ghg$EN.ATM.GHGT.KT.CE
) %>% lapply(htmltools::HTML)
# Generate interactive map
m = leaflet(countries_simple) %>%
setView(0, 20, zoom = 1.5) %>%
addTiles()
p10 <- m %>% addPolygons(
fillColor = ~pal(countries_plus_ghg[["EN.ATM.GHGT.KT.CE"]]),
weight = 1,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = countries_plus_ghg[["EN.ATM.GHGT.KT.CE"]], opacity = 0.7, title = "Emissions (kt of CO2 equivalent)",
position = "bottomleft")
p10
library(tidyverse)
library(WDI)
# Read the geojson dataset for choropleth
# From http://data.okfn.org/data/core/geo-countries#data
countries <- geojsonio::geojson_read("data/countries.geojson", what = "sp")
# Topologically-aware geometry simplification using rmapshaper package,
# keep = proportion of points to retain
countries_simple <- rmapshaper::ms_simplify(countries, keep = 0.05, keep_shapes = TRUE)
save(countries_simple, file = "data/countries_simple.RData")
# Download the greenhouse gas emissions data for year 1970 - 2012
# by using the World Bank's API,parse the resulting JSON file,
# and format it in the long country-year format.
wb_ghg <- WDI(country = "all",
indicator = "EN.ATM.GHGT.KT.CE",
start = 1970,
end = 2012,
extra = TRUE) %>%
filter(!is.na(region)) %>%
filter(!(region == "Aggregates")) %>%
select(EN.ATM.GHGT.KT.CE, iso3c, year, country)
# Saving on object in RData format for loading the data in Shiny app
save(wb_ghg, file = "data/wb_ghg.RData")
setwd("~/Courses/EDA/ghg/greenhouse-gas")
library(tidyverse)
library(WDI)
# Read the geojson dataset for choropleth
# From http://data.okfn.org/data/core/geo-countries#data
countries <- geojsonio::geojson_read("data/countries.geojson", what = "sp")
# Topologically-aware geometry simplification using rmapshaper package,
# keep = proportion of points to retain
countries_simple <- rmapshaper::ms_simplify(countries, keep = 0.05, keep_shapes = TRUE)
save(countries_simple, file = "data/countries_simple.RData")
# Download the greenhouse gas emissions data for year 1970 - 2012
# by using the World Bank's API,parse the resulting JSON file,
# and format it in the long country-year format.
wb_ghg <- WDI(country = "all",
indicator = "EN.ATM.GHGT.KT.CE",
start = 1970,
end = 2012,
extra = TRUE) %>%
filter(!is.na(region)) %>%
filter(!(region == "Aggregates")) %>%
select(EN.ATM.GHGT.KT.CE, iso3c, year, country)
# Saving on object in RData format for loading the data in Shiny app
save(wb_ghg, file = "data/wb_ghg.RData")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
countries_simple <- rmapshaper::ms_simplify(countries, keep = 0.01, keep_shapes = TRUE)
library(tidyverse)
library(WDI)
# Read the geojson dataset for choropleth
# From http://data.okfn.org/data/core/geo-countries#data
countries <- geojsonio::geojson_read("data/countries.geojson", what = "sp")
# Topologically-aware geometry simplification using rmapshaper package,
# keep = proportion of points to retain
countries_simple <- rmapshaper::ms_simplify(countries, keep = 0.01, keep_shapes = TRUE)
save(countries_simple, file = "data/countries_simple.RData")
# Download the greenhouse gas emissions data for year 1970 - 2012
# by using the World Bank's API,parse the resulting JSON file,
# and format it in the long country-year format.
wb_ghg <- WDI(country = "all",
indicator = "EN.ATM.GHGT.KT.CE",
start = 1970,
end = 2012,
extra = TRUE) %>%
filter(!is.na(region)) %>%
filter(!(region == "Aggregates")) %>%
select(EN.ATM.GHGT.KT.CE, iso3c, year, country)
# Saving on object in RData format for loading the data in Shiny app
save(wb_ghg, file = "data/wb_ghg.RData")
runApp()
library(tidyverse)
library(WDI)
# Read the geojson dataset for choropleth
# From http://data.okfn.org/data/core/geo-countries#data
countries <- geojsonio::geojson_read("data/countries.geojson", what = "sp")
# Topologically-aware geometry simplification using rmapshaper package,
# keep = proportion of points to retain
countries_simple <- rmapshaper::ms_simplify(countries, keep = 0.05, keep_shapes = TRUE)
save(countries_simple, file = "data/countries_simple.RData")
# Download the greenhouse gas emissions data for year 1970 - 2012
# by using the World Bank's API,parse the resulting JSON file,
# and format it in the long country-year format.
wb_ghg <- WDI(country = "all",
indicator = "EN.ATM.GHGT.KT.CE",
start = 1970,
end = 2012,
extra = TRUE) %>%
filter(!is.na(region)) %>%
filter(!(region == "Aggregates")) %>%
select(EN.ATM.GHGT.KT.CE, iso3c, year, country)
# Saving on object in RData format for loading the data in Shiny app
save(wb_ghg, file = "data/wb_ghg.RData")
